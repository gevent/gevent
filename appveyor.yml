clone_depth: 50
max_jobs: 8
shallow_clone: true
build:
  parallel: true
  verbosity: minimal
# The VS 2019 image doesn't have
# the MSVC needed for Python 2.7.
image: Visual Studio 2015

environment:
  global:
    APPVEYOR_SAVE_CACHE_ON_ERROR: "true"
    # SDK v7.0 MSVC Express 2008's SetEnv.cmd script will fail if the
    # /E:ON and /V:ON options are not enabled in the batch script interpreter
    # See: http://stackoverflow.com/a/13751649/163740
    CMD_IN_ENV: "cmd /E:ON /V:ON /C .\\appveyor\\run_with_env.cmd"
    # Use a fixed hash seed for reproducibility
    PYTHONHASHSEED: 8675309
    # Disable tests that use external network resources;
    # too often we get failures to resolve DNS names or failures
    # to connect on AppVeyor.
    GEVENTTEST_USE_RESOURCES: "-network"
    # Don't get warnings about Python 2 support being deprecated. We
    # know.
    PIP_NO_PYTHON_VERSION_WARNING: 1
    PIP_UPGRADE_STRATEGY: eager
    # Enable this if debugging a resource leak. Otherwise
    # it slows things down.
    # PYTHONTRACEMALLOC: 10
    ##
    # Upload settings for twine.
    TWINE_USERNAME: "__token__"
    TWINE_PASSWORD:
      secure: uXZ6Juhz2hElaTsaJ2Hnemm+YoYbjpkoT5NFFlj4xxSlZvUrjoiOdvPqxxCaNYozWIRM5QmXlj1nOF8nZDpzx7oAyVIMT2x3z9iI0C/G5r4G8uvbJJq6wpJRI5HQ3sE39qLK2MCPZJ3BTu/uvVgWWqQ6wInKXxNqDGyf9IgZOv3/sCd4CwD7bEqlwHzyeh9a2o17a5J1YMhL03LVRcrlmjN8/Ds642FtnF/e+VAhUdtZvU1ze8rfeR7KCe4ehOmy18dh5joPX8TJKbg/AJlIYQ==


  matrix:

    # Pre-installed Python versions, which Appveyor may upgrade to
    # a later point release.

    # 64-bit
    - PYTHON: "C:\\Python310-x64"
      PYTHON_VERSION: "3.10.0rc1"
      PYTHON_ARCH: "64"
      PYTHON_EXE: python
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019


    - PYTHON: "C:\\Python39-x64"
      PYTHON_VERSION: "3.9.x"
      PYTHON_ARCH: "64"
      PYTHON_EXE: python
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019

    - PYTHON: "C:\\Python27-x64"
      PYTHON_VERSION: "2.7.x" # currently 2.7.13
      PYTHON_ARCH: "64"
      PYTHON_EXE: python

    - PYTHON: "C:\\Python38-x64"
      PYTHON_VERSION: "3.8.x"
      PYTHON_ARCH: "64"
      PYTHON_EXE: python
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019

    - PYTHON: "C:\\Python37-x64"
      PYTHON_VERSION: "3.7.x"
      PYTHON_ARCH: "64"
      PYTHON_EXE: python
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019

    - PYTHON: "C:\\Python36-x64"
      PYTHON_VERSION: "3.6.x" # currently 3.6.8
      PYTHON_ARCH: "64"
      PYTHON_EXE: python

    # 32-bit
    - PYTHON: "C:\\pypy2.7-v7.3.1-win32"
      PYTHON_ID: "pypy"
      PYTHON_EXE: pypy
      PYTHON_VERSION: "2.7.x"
      PYTHON_ARCH: "32"

    # 32-bit, wheel only (no testing)
    - PYTHON: "C:\\Python39"
      PYTHON_VERSION: "3.9.x"
      PYTHON_ARCH: "32"
      PYTHON_EXE: python
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019
      GWHEEL_ONLY: true

    - PYTHON: "C:\\Python38"
      PYTHON_VERSION: "3.8.x"
      PYTHON_ARCH: "32"
      PYTHON_EXE: python
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019
      GWHEEL_ONLY: true

    - PYTHON: "C:\\Python37"
      PYTHON_VERSION: "3.7.x"
      PYTHON_ARCH: "32"
      PYTHON_EXE: python
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019
      GWHEEL_ONLY: true

    - PYTHON: "C:\\Python36"
      PYTHON_VERSION: "3.6.x" # currently 3.6.3
      PYTHON_ARCH: "32"
      PYTHON_EXE: python
      GWHEEL_ONLY: true

    - PYTHON: "C:\\Python27"
      PYTHON_VERSION: "2.7.x" # currently 2.7.13
      PYTHON_ARCH: "32"
      PYTHON_EXE: python
      GWHEEL_ONLY: true

    # Also test a Python version not pre-installed
    # See: https://github.com/ogrisel/python-appveyor-demo/issues/10

    # - PYTHON: "C:\\Python266"
    #   PYTHON_VERSION: "2.6.6"
    #   PYTHON_ARCH: "32"
    #   PYTHON_EXE: python

# matrix:
#   allow_failures:
#     - PYTHON_ID: "pypy"

install:
  # If there is a newer build queued for the same PR, cancel this one.
  # The AppVeyor 'rollout builds' option is supposed to serve the same
  # purpose but it is problematic because it tends to cancel builds pushed
  # directly to master instead of just PR builds (or the converse).
  # credits: JuliaLang developers.
  - ps: if ($env:APPVEYOR_PULL_REQUEST_NUMBER -and $env:APPVEYOR_BUILD_NUMBER -ne ((Invoke-RestMethod `
        https://ci.appveyor.com/api/projects/$env:APPVEYOR_ACCOUNT_NAME/$env:APPVEYOR_PROJECT_SLUG/history?recordsNumber=50).builds | `
        Where-Object pullRequestId -eq $env:APPVEYOR_PULL_REQUEST_NUMBER)[0].buildNumber) { `
          throw "There are newer queued builds for this pull request, failing early." }
  - ECHO "Filesystem root:"
  - ps: "ls \"C:/\""

  - ECHO "Installed SDKs:"
  - ps: "if(Test-Path(\"C:/Program Files/Microsoft SDKs/Windows\")) {ls \"C:/Program Files/Microsoft SDKs/Windows\";}"

  # Install Python (from the official .msi of http://python.org) and pip when
  # not already installed.
  # PyPy portion based on https://github.com/wbond/asn1crypto/blob/master/appveyor.yml
  - ps:
      $env:PYTMP = "${env:TMP}\py";
      if (!(Test-Path "$env:PYTMP")) {
        New-Item -ItemType directory -Path "$env:PYTMP" | Out-Null;
      }
      if ("${env:PYTHON_ID}" -eq "pypy") {
        if (!(Test-Path "${env:PYTMP}\pypy2-v7.3.1-win32.zip")) {
          (New-Object Net.WebClient).DownloadFile('https://bitbucket.org/pypy/pypy/downloads/pypy2.7-v7.3.1-win32.zip', "${env:PYTMP}\pypy2-v7.3.1-win32.zip");
        }
        7z x -y "${env:PYTMP}\pypy2-v7.3.1-win32.zip" -oC:\ | Out-Null;
      }
      elseif (-not(Test-Path($env:PYTHON))) {
        & appveyor\install.ps1;
      }

  # Prepend newly installed Python to the PATH of this build (this cannot be
  # done from inside the powershell script as it would require to restart
  # the parent CMD process).
  - "SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PYTHON%\\bin;%PATH%"
  - "SET PYEXE=%PYTHON%\\%PYTHON_EXE%.exe"

  # Check that we have the expected version and architecture for Python
  - "%PYEXE% --version"
  - "%PYEXE% -c \"import struct; print(struct.calcsize('P') * 8)\""

  # Upgrade to the latest version of pip to avoid it displaying warnings
  # about it being out of date. Do this here instead of above in
  # powershell because the annoying 'DEPRECATION:blahblahblah 2.7 blahblahblah'
  # breaks powershell.
  - "%CMD_IN_ENV% %PYEXE% -mensurepip -U --user"
  - "%CMD_IN_ENV% %PYEXE% -mpip install -U --user pip"

  - ps: "if(Test-Path(\"${env:PYTHON}\\bin\")) {ls ${env:PYTHON}\\bin;}"
  - ps: "if(Test-Path(\"${env:PYTHON}\\Scripts\")) {ls ${env:PYTHON}\\Scripts;}"

cache:
  - "%TMP%\\py\\"
  - '%LOCALAPPDATA%\pip\Cache -> appveyor.yml,setup.py'

build_script:
  # Build the compiled extension
  # Try to get some things that don't wind up in the pip cache as
  # built wheels if they're built during an isolated build.
  - "%CMD_IN_ENV% %PYEXE% -m pip install -U wheel cython setuptools cffi"
  - if not "%GWHEEL_ONLY%"=="true" %PYEXE% -m pip install -U -e .[test]

test_script:
  # Run the project tests
  - if not "%GWHEEL_ONLY%"=="true" %PYEXE% -c "import greenlet; print(greenlet, greenlet.__version__)"
  - if not "%GWHEEL_ONLY%"=="true" %PYEXE% -c "import gevent.core; print(gevent.core.loop)"
  - if not "%GWHEEL_ONLY%"=="true" %PYEXE% -c "import gevent; print(gevent.config.settings['resolver'].get_options())"
  - if not "%GWHEEL_ONLY%"=="true" %PYEXE% -c "from gevent._compat import get_clock_info; print(get_clock_info('perf_counter'))"
  - if not "%GWHEEL_ONLY%"=="true" %PYEXE% -mgevent.tests --second-chance --config known_failures.py --quiet

after_test:
  # pycparser can't be built correctly in an isolated environment.
  # See
  # https://ci.appveyor.com/project/denik/gevent/builds/23810605/job/83aw4u67artt002b#L602
  # So we violate DRY and repeate some requirements in order to use
  # --no-build-isolation
  - "%CMD_IN_ENV% %PYEXE% -m pip install wheel cython setuptools cffi twine"
  - "%CMD_IN_ENV% %PYEXE% -m pip wheel --no-build-isolation . -w dist"
  - ps: "ls dist"

artifacts:
  # Archive the generated wheel package in the ci.appveyor.com build report.
  - path: dist\gevent*whl


deploy_script:
  - ps: if ($env:APPVEYOR_REPO_TAG -eq $TRUE) { twine upload --skip-existing dist/gevent* }

deploy: on
